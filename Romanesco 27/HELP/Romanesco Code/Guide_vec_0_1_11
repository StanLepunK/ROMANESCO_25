// VEC 0.1.11
inspirated by GLSL and PVector Method
/////////////////////////////////////

Like PVector, but closer of GLSL method.
is use to store float value than below

Vec2()
Vec2(float value)
Vec2(int value)
Vec2(PVector p)
Vec2(float x, float y) 
Vec2(int x, int y) 
you can catch : 
x,y 
s,t
u,v

Vec3()
Vec3(float value)
Vec3(intvalue)
Vec3(PVector p)
Vec3(float x,float y, float z) 
Vec3(int x,int y, int z) 
you can catch : 
x,y,z 
r,g,b 
s,t,p

Vec4()
Vec4(float value)
Vec4(float x,float y, float z, float w) 
Vec4(int x, int y, int z, int w) 
you can catch : 
x,y,z,w 
r,g,b,a 
s,t,p,q

Vec5()
Vec5(float value)
Vec5(float a,float b, float c, float d, float e)
Vec5(int a, int b, int c, int d, int e)
you can catch 
a,b,c,d,e




// EXTRA BONUS ////////////////////////////////////////////
special thing, you can chain your operation for example
your_vec2.jitter(3,10,30).add(2).mult(v3_2) ;
//////////////////////////////////////////////////////////




You can use method  Vec2(arg float,arg float)
          Vec3(arg float,arg float,arg float)
          Vec4(arg float,arg float,arg float,arg float)
those methode return a Vec value

// INTERN method
//////////////////

Magnitude int
-------------
@ return float
> magnitude of the vectors 
yourVec2.map()
yourVec3.map()
yourVec4.map()
> magnitude of two vectors, between himself and the target vector
> return magnitude in float component
yourVec2.map(Vec2 v)
yourVec3.map(Vec3 v)
yourVec4.map(Vec3 v)

Distance int
------------
@ return float
> distance between himself and the target vector
yourVec2.dist(Vec3 v_target)
yourVec3.dist(Vec3 v_target)
yourVec4.dist(Vec3 v_target)





Multiplication int
------------------
@ return Vec2, Vec3 or Vec4
> Multiplication vector by a same float
yourVec2.mult(float num)
yourVec3.mult(float num)
yourVec4.mult(float num)

@ return Vec2, Vec3 or Vec4
> Multiplication vector by a different float
yourVec2.mult(float num_1, float num_2)
yourVec3.mult(float num_1, float num_2, float num_3)
yourVec4.mult(float num_1, float num_2, float num_3, float num_4)

> Multiplication vector by Vector
> return componant mult by the float
yourVec2.mult(Vec2 v)
yourVec3.mult(Vec3 v)
yourVec4.mult(Vec3 v)

Division int
-------------
@ return Vec2, Vec3 or Vec4
> Division vector by float
yourVec2.div(float num)
yourVec3.div((float num)
yourVec4.div((float num)

> Division vector by Vector
> return componant mult by the float
yourVec2.div(Vec2 v)
yourVec3.div(Vec3 v)
yourVec4.div(Vec3 v)


Addition int
------------
@ return Vec2, Vec3 or Vec4
> add float value to the original
yourVec2.add(float value)
yourVec3.add(float value)
yourVec4.add(float value)
> add one vector to the original
yourVec2.add(Vec2 v_a)
yourVec3.add(Vec3 v_a)
yourVec4.add(Vec4 v_a)
> add two vectors
yourVec2.add(Vec2 v_a, Vec2 v_b)
yourVec3.add(Vec3 v_a, Vec3 v_b)
yourVec4.add(Vec4 v_a, Vec4 v_b)

Copy int
--------
@ return Vec2, Vec3, Vec4 or Vec5
> Retunn the componant of the Vec, in Vec 
> Work for Vec2, Vec3, Vec4, Vec5
yourVec.copy() ;

> Return the componant of the Vec in PVector
> Work for Vec2 and Vec3, there is no PVector with 4 components
yourVec.copyVecToPVector() ;

Map int
-------
> map Vec on different scale
yourVec.mapVec(float minIn, float maxIn, float minOut, float maxOut)
yourVec.mapVec(float minIn, float maxIn, float minOut, float maxOut)
yourVec.mapVec(float minIn, float maxIn, float minOut, float maxOut)




// end internal method
//////////////////////













// EXTERNAL method
//////////////////

Create Vec ext
--------------
return Vec2, Vec3, Vec4, Vec5
Vec2()
Vec2(float x, float y)
Vec3()
Vec3(float x, float y, float z)
Vec4()
Vec4(float x, float y, float z, float w)
Vec5()
Vec5(float a, float b, float c, float d, float e)


addition ext
------------
@ return Vec2, Vec3 or Vec4
> return the sum of vectors
add(Vec2 v1, Vec2 v2)
add(Vec3 v1, Vec3 v2)
add(Vec4 v1, Vec4 v2)


Multiplication ext
------------------
> return the multi of two vectors
mult(Vec2 v1, Vec2 v2)
mult(Vec3 v1, Vec3 v2)
mult(Vec4 v1, Vec4 v2)


Division ext
-------------
> return the multi of two vectors
div(Vec2 v1, Vec2 v2)
div(Vec3 v1, Vec3 v2)
div(Vec4 v1, Vec4 v2)


Map ext
-------
@ return Vec2, Vec3 or Vec4
> return a mapping Vec on different scale
mapVec(Vec2 v, float minIn, float maxIn, float minOut, float maxOut)
mapVec(Vec3 v, float minIn, float maxIn, float minOut, float maxOut)
mapVec(Vec4 v, float minIn, float maxIn, float minOut, float maxOut)


Equals ext
----------
@ return boolean
> compares two Vectors too see if those ones are identicals
equals(Vec2 v1, Vec2 v2)
equals(Vec3 v1, Vec3 v2)
equals(Vec4 v1, Vec4 v2)
equals(PVector v1, PVector v2)


Magnitude ext
-------------
@return float
> return Magnitude of vector orlength
map(Vec2 v)
map(Vec3 v)
map(Vec3 v)
> magnitude of two vectors, between himself and the target vector */
map(Vec2 v1, Vec2 v2)
map(Vec3 v1, Vec3 v2)
map(Vec3 v1, Vec3 v2)

Distance ext
------------
@ return float
> add two vectors
dist(Vec2 v_a, Vec2 v_b)
dist(Vec3 v_a, Vec3 v_b)
dist(Vec4 v_a, Vec4 v_b)


Middle ext
------------
@ return Vec2, Vec3 or Vec4
> find the middle position between two vectors
middle(Vec2 v_a, Vec2 v_b)
middle(Vec3 v_a, Vec3 v_b)
middle(Vec4 v_a, Vec4 v_b)

Jitter ext
------------
@ return Vec2, Vec3 or Vec4
> jitter effect with a global range or specific range for each component of vec
jitterVec2(int range)
jitterVec2(int range_x, int range_y)
jitterVec3(int range)
jitterVec3(int range_x, int range_y, int range_z)
jitterVec4(int range)
jitterVec4(int range_x, int range_y, int range_z, int range_w)


Copy PVector to Vec ext
-----------------------
@ return Vec3
> transforme PVector to Vec3
copyPVectorToVec(PVector v)


// END VEC
//////////