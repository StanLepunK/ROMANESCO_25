_____________
Romanesco Unu 
°°°°°°°°°°°°°
°°°°°°°°°°°°°
________________________
Guide to code the object
°°°°°°°°°°°°°°°°°°°°°°°°
°°°°°°°°°°°°°°°°°°°°°°°°


________________
FAMILY OBJECT
°°°°°°°°°°°°°°°°
int IDfamily = # ;
 and give too the family ID
 1 for simple
 2 for texture
 3 for typo


________________________________
SLIDER CONTROLLER ACTIVATION
°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
 remove the slider you don't want display
 romanescoSlider = "Hue fill,Saturation fill,Brightness fill,Alpha fill,Hue stroke,Saturation stroke,Brightness stroke,
 					Alpha stroke,Thickness,Size X,Size Y,Size Z,Canvas X,Canvas Y,Canvas Z,Quantity,Speed,Direction,
 					Angle,Amplitude,Analyze,Family,Life,Force" ;

________________
VOID
°°°°°°°°°°°°°°°°
 there is TWO MAINS VOID in class ROMANESCO
 void setting()
 and 
 void display()
 if you use other void you must call this one in one of them



_____________________________
LIBRARY OR EXTERNAL CLASSES
°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
when you code in the class romanesco and call external class or library need (this) you must write (callingClass) :
example 
* name = new LibraryOrClass(this);) >>>
>>> become >>>
<<< name = new LibraryOrClass(callingClass);)




_________
RENDERING
°°°°°°°°°
boolean fullRendering ;
You can use this boolean to limit your object on the Prescene. It's usefull with object use a lot of particuls.
yhis boolean is false on the Prescene and true on the Scene.









____________
VARIABLES
°°°°°°°°°°°°°

BUTTON
––––––
mode[IDobj] @return int the number of the displaying mode
action[IDobj] @return boolean / we use this one for the mouse move + vTouch in Romanesco application
sound[IDobj] #return boolean 
parameter[IDobj] #return boolean 


SLIDER
––––––––––––––––––––––
VAR object from slider

hue(fillObj[IDobj]) ; @return float value 0.0 > 360.0
saturation(fillObj[IDobj]) ; @return float value 0.0 > 100.0
brightness(fillObj[IDobj]) ;  @return float value 0.0 > 100.0
alpha(fillObj[IDobj])  ; @return float value 0.0 > 100.0
>>>> fillObj[IDobj] = color(hue_fill,saturation_fill,brightness_fill,alpha_fill) ; @return color (360100,100,100)

hue(strokeObj[IDobj]) ; @return float value 0.0 > 360.0
saturation(strokeObj[IDobj]) ; @return float value 0.0 > 100.0
brightness(strokeObj[IDobj]) ; @return float value 0.0 > 100.0
alpha(strokeObj[IDobj]) ; @return float value 0.0 > 100.0
>>>> strokeObj[IDobj] = color(hue_stroke,saturation_stroke,brightness_stroke,alpha_stroke) ; @return color (360100,100,100)

thicknessObj[IDobj] @return float value 0.1 > height/3

sizeXObj[IDobj] ; @return float value 0.1 > width
sizeYObj[IDobj]  ;  @return float value 0.1 > width
sizeZObj[IDobj]  = ; @return float value 0.1 > width

canvasXObj[IDobj]  ; @return float value width/10  > width
canvasYObj[IDobj]  ; @return float value width/10  > width
canvasZObj[IDobj]  ; @return float value width/10  > width

familyObj[IDobj]  ;  @return float value 0 to 1
quantityObj[IDobj]  ; @return float value 0 to 1
lifeObj[IDobj]  ; @return float value 0 to 1

speedObj[IDobj]  ; @return float value 0 to 1

directionObj[IDobj]  ; @return float value 0 > 360
angleObj[IDobj]  ; @return float value 0 > 360

amplitudeObj[IDobj]  ; @return float value 0 > 1
attractionObj[IDobj]  ; @return float value 0 > 1
repulsionObj[IDobj]  ; @return float value 0 > 1
influenceObj[IDobj]  ; @return float value 0 > 1
alignmentObj[IDobj]  ; @return float value 0 > 1
analyzeObj[IDobj]  ; @return float value 0 > 1


// shortcut var
float fontSizeObj[IDobj] ; 3 to height since Romanesco 25 work with the slider sizeXObj

void aspect(int ID) give the fill, stroke and strokeWeight



SOUND 
–––––––––––––––––––
VAR from the sound

Volume
left[IDobj]  @return float value 0 > 1 / 1 when it's the sound is off
right[IDobj] @return float value 0 > 1 / 1 when it's the sound is off
mix[IDobj]   @return float value 0 > 1 / 1 when it's the sound is off

Beat
beat[IDobj] @return float value 1 > 3 / last value when the sound is off
kick[IDobj] @return float value 1 > 3 / last value when the sound is off
snare[IDobj] @return float value 1 > 3 / last value when the sound is off
hat[IDobj]   @return float value 1 > 3 / last value when the sound is off
allBeats(IDobj) @return float value 1 > 12 / last value when the sound is off
??????????????????????????
????? it's weird because normally the value return must be between 1 to 10 for single value and 1 to 40 for the sum 

Tempo
tempo[IDobj] @return float value 0 > 1 / 1 when it's the sound is off
tempoBeat[IDobj]  @return float value 0 > 1 / 1 when it's the sound is off
tempoKick[IDobj]  @return float value 0 > 1 / 1 when it's the sound is off
tempoSnare[IDobj] @return float value 0 > 1 / 1 when it's the sound is off
tempoHat[IDobj]   @return float value 0 > 1 / 1 when it's the sound is off

float getTimeTrack()  if the track is ON return the time elapse from the beginning play to now, if the track is OFF return value < 0.2

float band [IDobj][whichBand] // whichBand give the information of the band where catch the info
usualy there is 16 bands, to know the number :
bandSpectrum.length ;



COMMON EXTERNAL DEVICE
––––––––––––––––––––––––––––––––––––––
VAR from the mouse, pen and leapmotion


POINTER XYZ
––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
PVector mouse[IDobj] refresh with space touch
mouse[0].x // mouse[0].y // absolute position of the mouse
mouse[0].z // return info from the z axis when the leapmotion is active
mouse[IDobj].x // mouse[IDobj].y // mouse[IDobj].z // same info than mouse[0] but this one is refresh when you press the space

MOUSE WHEEL
––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
int wheel[IDobj]
wheel[0] and wheel[IDobj]
or use the void zoom() and take the float value getCountZoom...this value is more reactive !

PMOUSE
––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
PVector pmouse[IDobj]
pmouse[0] and pmouse[IDobj]


PEN
––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
PVector pen[IDobj] or pen[0] refresh with space touch
pen[IDobj].x pen[IDobj].y   // information from the tablet tilt : orientation of the pen 
pen[IDobj].z - value to 0 to 1 - information from tablet : pressure pen 


MOUSE CLICK BOOLEAN
–––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
Short click just for one shot
	boolean clickShortLeft[IDobj] ;
	boolean clickShortRight[IDobj] ;
Active after one mousePressed, be inactive after the mouse Released
	boolean clickLongLeft[IDobj] ;
	boolean clickLongLeft[IDobj] ;



LEAP MOTION or MOUSE ORDER
–––––––––––––––––––––––––––
boolean ORDER_ONE ; eturn "true" the leftClick or when only one finger are in the leapmotion field	
boolean ORDER_TWO ; return "true" the rightClick or when only two fingers are in the leapmotion field	
boolean ORDER_THREE ; return "true" when three fingers are in the leapmotion field









______________________
IMPORT
°°°°°°°°°°°°°°°°°°°°°°
IMAGE IMPORT
–––––––––––––––––––––––
load image from the menu controller:
img[IDobj] = loadImage(imagePath[whichImage[IDobj]]) ;

details:
loadImg(IDobj) void use to load and update the image
String imagePath[whichImage] ; image jpg from the dropdown menu
PImage img[IDobj] image selected from dropdown menu and confirm by the Parameter button of the object


TEXT IMPORT
–––––––––––––––––––––––
loadText(IDobj) use to load and update the text

String textImport[IDobj] raw text selected from the folder preferences/Karaoke

textPath[whichText] ; text from the dropdown menu

int numChapters(String textImport[IDobj]) give the number of the chapter of your raw text

int numMaxSentencesByChapter(String textImport[IDobj]) give the number of sentences of the chapter have the most sentences

String whichSentence(String txt, int whichChapter, int whichSentence) return String

Romanesco call fileText.txt from the folder Karaoke from the preferences folder,
so you can write on it when you use Romanesco split function
"*" to separate the chapter 
"/" to separate the sentence

** When you code take a care to save the karaoke.txt in each folder of dev (Scene, Prescene, Mirroir) **








_____________________________
MISC
°°°°°°°°°°°°°°°°°°°°°°°°°°°°°

STARTING POSITION
–––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
give the position of the object at the opening app
PVector startingPosition[IDobj] by default this value is equal to (width/2, height/2, 0)

to change that use this void 
void startPosition(int IDobj, int x, int y, int z) use it IN THE void display()
 give the x,y,z data to PVector  startingPos[IDobj]




RESET OBJECT : empty the object list
––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
To empty the list or reset object activate by backspace and delete
boolean resetAction(IDobj) when the Action button is On

boolean resetParameter(IDobj) when the Parameter button is On
Suggestion use Action Button for the particle and the list
and Parameter for the other reset. But it's just a suggestion




CAMERA
––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
travelling(PVector targetPos) ; // the camera go to a specific point in the scene


OBJECT
–––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
boolean setting[IDobj] to block the setting at the beggining and when you come back to the button setting to don't go immediatly on the value slider...not finish in progress


MOTION
––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
boolean motion[IDobj] boolean use for the move activate or desactivate by the "m" key - booleann mTouch - 


ALIGNEMENT
––––––––––––––––––––––––––––––––––––––––––––––––––––––––
boolean horizon[IDobj] boolean use for the move activate or desactivate by the "h" key - booleann hTouch -


REVERSE DIRECTION
–––––––––––––––––––––––––––––––––––––––––––––––––––––––––
boolean reverse[IDobj] use to reverse direction or what you want, activa by "r" key - boolean rTouch -


INFO
–––––––––––––––––––––––––––––––––––––––––––––––––––––––––
boolean objectInfoDisplay[IDobj] use to display info or what you want show on Prescene or Scene from your object, activate by "i" key - boolean iTouch

String objectName[IDobj] return the name of your object

String objectInfo[IDobj]  can be use to add info who can be display in the info option when you push "i" on the prescene

int objectID[IDobj] return the ID of the object




COMMON ASSOCIATION 
–––––––––––––––––––––––––––––––––––––––––––––––––––––––––
between the controler and the prescene
// with action button
// add obj
if(actionButton[IDobj] == 1 && nTouch ) { /* yourList.add( new YourClass ()); */ }
or
int spawnFrequency = 3 ; 
if(actionButton[IDobj] == 1 && nLongTouch && frameCount % spawnFrequency == 0 ) { /* yourList.add( new YourClass ()); */ }
// motion
if(actionButton[IDobj] == 1 && mTouch ) { }
// change stuff like color palette....
if(actionButton[IDobj] == 1 && xTouch ) { }
// stop, move the mouse inside the object
if(actionButton[IDobj] == 1 && spaceTouch ) { }

//with parametter button
open folder
if ( parameterButton[IDobj] == 1 && oTouch ) { }